


/* requirement */


#ifndef DEPENDENCIES_H
#define DEPENDENCIES_H


typedef enum {INVALID = 0, MULTICAST, REQUEST, RESPONSE} packet_type;


struct payload {
	uint16_t 	seqnum;	//seq number of the packet
	/*
		packettype:
		0: INVALID
		1: MULTICAST for data dissemination
		2: REQUEST for packet
		3: RESPONSE for requested packet
	*/
	uint16_t	data[MAX];
	uint8_t 	packettype;
	uint8_t		numchunks;
};

/*
struct recovery {
	uint16_t	seqnum;
	uint8_t 	packettype;
}
*/






#endif

/*

*requirement*

client:
recv:
-> reset timer	//optional
-> check seqnum
-> if the last seqnum is recv or if all the arr[seqnum] are true -> break
-> else timer starts	//optional
-> when timer ends callback //optional

callback:
-> request for missing seqnum from arr[seqnum] which are false
-> unicast reqeust server those missing packets





server :
send :
-> break data into chunks

loop
-> add seq number to data packet starting from 0
-> add total number of chunks to the packet
-> copy first chunk of data
repeat loop

->

- 1kb data -

"iYo8BjcgFF8aFtHLHZdRKNxliQEa8ozq38YP8dSXIwbAw2fMx46f8Xc3CmMouNEh"
"m7lBkvtUauXX1V8oF4jT4CKIlbE03ghFBS2hTcnTiZ1Go5Ti1gVWRcUdHAh9g1Oh"
"qhSAFpT2dLgVxoo2ZCHhNSE0rm2I5OBVhdklMnzBgDDW5gdpOm7389BaNgqdAisB"
"k7oUilXORLjy7kDu86GHSNLzAJjXUxxEc7PeJfPLyC0khgSy4aYUhlFsenbK4sjT"
"cDSZ5YS33eoOeiTze2onUl7PfPz8No6W7AHYW7S34vUADHDOcABcEkDlpxQhoKi7"
"GpM1ksIrfHSbpfCJhoqqh9w9kjITgdDrqbp9aHTzjZOScTCtzpMFACJalZNRzhPS"
"WAY301mZjr2KD8pVrhkNfNxQyg1nmm7QJSXN4lDj0dIawEflfSVXLGShl0vxcF3y"
"TsxK5w6msIvzeRDgaYAJ5zmMWg42S4Ap7WA1eHYepIrlwmn1TdwSEPPcMx6TjcBA"
"bIlj3gU7JfgoItY5FqNQJgYy6Vw0NPdwwPcnfPmtLhH5nl55eJFwwpB6UgZanUyq"
"qZdgiEiFy8GoGIaOjXC387ihvfvaiGA2sBgh3k87i7Eb7QTNrthpZSdlIk8PEzIl"
"yNqwCORP6psr9r8BBTnJqYpuayMhQD8vuxp9aBXaMLWmBAYo2EAtB45YeXEGU6vp"
"R7BUgN9AgmDERPzcyeOYG0ExpDE5cVY8OL5pNXM43MNAt7jkJAFnSRNKw6Qq50qY"
"urbFRN69XbWj5t4HkcFMiVwIOLQARBNmcimSzlnhipF8bPY2P1QfsSqCfsnsuCkK"
"YVuqVbPvrWTSGIrfVveI01YwiIWOeXjeMdh78Ruq9zy9xbkNkwOLcAiXzlrF0Dpg"
"DLYVCvYVKtzRSOCtCh5KPrTw0D2H5gvFFRgAH1ZgYFt6UWvv1ht65ptE7KOeNwc0"
"Z63lPLXusS0KbZcuAgXFqXIuhVFxT7PbPdA9CifI7gBC4ia4H0uQiccRRLOajCyK"


1234567890123456789012345678901234567890123456789012345678901234 - 64 bytes





*/






int data_size = 0;




data_size = data[0];


char* arr = malloc(data_size);
if (arr == NULL) {
	printf("unable to allocate memory : \n");
	return -1;
}






































